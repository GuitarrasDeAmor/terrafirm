#!/usr/bin/env bash

# Written by: https://github.com/elocnatsirt
# Terrafirm is a wrapper script around Terraform that enforces a specific 
# configuration structure for your team.
# Terrafirm also provides some helpful functions that allow you to streamline 
# writing and validating your Terraform modules and configurations.

## Script Help
SCRIPT=`basename ${BASH_SOURCE[0]}`
NORM=`tput sgr0`
BOLD=`tput bold`
REV=`tput smso`

function help {
  echo -e \\n"${REV}Basic usage:${NORM} ${BOLD}$SCRIPT (environment) (config) (cmd) (optional_args) ${NORM}"
  echo -e "${REV}Advanced usage:${NORM} ${BOLD}$SCRIPT (terrafirm_helper) (args) ${NORM}"\\n
  echo -e "${BOLD}Basic command line options:${NORM}"
  echo -e "${REV}\$1${NORM} (Required) TF environment name. Will reference an environment specific variable file of the same name."
  echo -e "${REV}\$2${NORM} (Required) TF configuration name to manage."
  echo -e "${REV}\$3${NORM} (Required) Command for Terraform to run against specified environment and configuration."
  echo -e "${REV}\$4${NORM} (Optional) Extra args to pass to Terraform."
  echo -e "Example: ${BOLD}$SCRIPT dev vpc plan -var 'map={ override = "yes" }'${NORM}"\\n

  echo -e "${REV}generate_structure${NORM} Generates a basic Terrafirm project structure in the current working directory."
  echo -e "  - Example: ${BOLD}$SCRIPT generate_structure ${NORM}"

  echo -e "${REV}generate_module${NORM} Generates a Terraform module structure with the given name."
  echo -e "  - Example: ${BOLD}$SCRIPT generate_module my_company/aws/vpc ${NORM}"

  echo -e "${REV}generate_variables${NORM} Generates a Terraform variable file based on the Terrafirm module path provided."
  echo -e "  - Ignores files with the name 'variables.tf','outputs.tf', and files with the '.tfvars' extension."
  echo -e "  - Example: ${BOLD}$SCRIPT generate_variables my_company/aws/vpc ${NORM}"
  exit 2
}

## Terrafirm Functions
function generate_structure {
  mkdir -p configs
  mkdir -p modules
  mkdir -p variables/environments
  if [ ! -e terrafirm_files/terrafirm_variables.sh ]; then
    tee "terrafirm_files/terrafirm_variables.sh" <<EOF > /dev/null
#!/usr/bin/env bash
project_name="terrafirm"
init_opts="-backend-config="bucket=terrafirm-states" -backend-config="region=us-east-1" -backend-config="profile=default" -backend-config="shared_credentials_file=$HOME/.aws/credentials""
EOF
  fi
  echo -e "${REV}Notice:${NORM} Generated Terrafirm directory structure at ${PWD}"
  exit
}

function generate_module {
  mkdir -p modules/$1
  touch modules/$1/main.tf
  touch modules/$1/outputs.tf
  touch modules/$1/variables.tf
  touch modules/$1/README.md
  curl -so modules/$1/LICENSE http://www.wtfpl.net/txt/copying/
  echo -e "${REV}Notice:${NORM} Generated Terraform module structure at ${PWD}/modules/$1"
  exit
}

function generate_variables {
  cd modules/$1 || help
  files=`ls | grep -v variables | grep -v outputs | grep -v .tfvars`
  cat $files | grep '${var.' | sed 's/.*${var./var./g;s/}.*//g;s/ [!@#\$%^&*()].*//g' | sort | uniq | sed 's/var./variable "/g;s/$/" {}/g' >> generated_variables.tfvars
  echo -e "${REV}Notice:${NORM} Module variable file generated at ${PWD}/generated_variables.tfvars"
  exit
}

function run_terraform {
  # Remove local state file before running to prevent environment conflicts
  rm -rf .terraform/terraform.tfstate

  # Initialize the Terrafirm remote state and gather modules
  terraform init -input=false -get=true -backend=true -backend-config="key=${environment}/${1}/terrafirm.tfstate" ${init_opts}

  # Gather variable files
  variable_files=""
  for filename in "../../variables/environments/${environment}/*.tfvars"; do
    for file in $filename; do
      variable_files=$variable_files" -var-file $file"
    done
  done

  # Validate the Terraform configuration before running
  terraform validate ${variable_files}

  if [ $? -eq 1 ]; then
    echo -e \\n"${REV}ERROR:${NORM} Fix the validation errors above & re-run Terrafirm.${NORM}"
    exit 1
  fi

  # Run the Terraform command specified
  terraform ${tf_cmd} ${variable_files} ${extra_tf_args}

  if [ $? -eq 1 ]; then
    echo -e \\n"${REV}ERROR:${NORM} Terrafirm did not run successfully against the '${1}' config in the '${environment}' environment.${NORM}"
    exit 1
  else
    echo -e \\n"${REV}Notice:${NORM} Finished Terrafirming the '${1}' config in the '${environment}' environment."
  fi
}

function role {
  while IFS="" read -r cfg || [ -n "$cfg" ]
  do
    cd ../${cfg}
    run_terraform "$cfg"
  done < $1
}

## Terrafirm Helper
valid_terrafirm_actions=( generate_module generate_structure generate_variables help )
terrafirm_action=$1
terrafirm_arg=$2

# If the first argument is recognized as a valid Terrafirm action, execute it 
if [[ " ${valid_terrafirm_actions[*]} " = *" ${terrafirm_action} "* ]]; then
  ${terrafirm_action} ${terrafirm_arg}
  exit
fi

## Terrafirm Wrapper
environment=$1
config=$2
tf_cmd=$3

NUMARGS=$#
if [ $NUMARGS -le 2 ]; then
  help
elif [ $NUMARGS -gt 3 ]; then
  while shift && [ -n "$3" ]; do
    extra_tf_args="${extra_tf_args} $3"
  done
fi

# Source Terrafirm variables
source terrafirm_files/terrafirm_variables.sh || help

# Make sure the user is in the root directory of the terraform repo.
if [ "${PWD##*/}" != "${project_name}" ]; then
  echo "You need to be in the root of the Terraform project."
  exit 1
fi

# Check the environment variable to ensure it exists and is valid.
if [ ! -d "variables/environments/${environment}" ]; then
  echo "${environment} does not appear to be a real environment. To add an environment, create a folder with the environment name under 'variables/environments/' and add the necessary variables."
  exit 1
fi

# Check the config variable to ensure it exists and is valid.
if [ "${config}" == "" ]; then
  echo "You need to specify a configuration to manage."
  exit 1
else
  if [ ! -d "configs/${config}" ]; then
    echo "Are you sure this configuration exists? Cannot find it at $(pwd)/configs/${config}/"
    exit 1
  fi
  cd configs/${config}
fi

# Run Terraform command(s)
if [ -e default.tfrole ]; then
  if [ -e ${environment}.tfrole ]; then
    role ${environment}.tfrole
  else
    role default.tfrole
  fi
else
  run_terraform ${config}
fi